package dictionary;

import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class SaveableDictionary {

    private HashMap<String, String> dict;
    private HashMap<String, String> dictR;
    private ArrayList<HashMap> list;
    private String file;

    public SaveableDictionary() {
        this.dict = new HashMap<>();
        this.dictR = new HashMap<>();
        this.list = new ArrayList<>();
    }

    public SaveableDictionary(String file) {
        this.file = file;
    }

    public boolean load() {
        try (Scanner fileReader = new Scanner(new File(this.file))) {
            while (fileReader.hasNextLine()) {
                String line = fileReader.nextLine();
                String[] parts = line.split(":");

                String key = parts[0];
                String value = parts[1];
                dict.put(key, value);
                dictR.put(value, key);
                list.add(dict);
                list.add(dictR);
            }
        } catch (Exception e) {
            return false;
        }
        return true;
    }

    public boolean save() {
        try (PrintWriter writer = new PrintWriter(file)) {
            for (int a = 0; a < list.size(); a++) {
                HashMap hList = list.get(a);
                for (Object key : hList.keySet()) {
                    for (Object value : hList.values()) {
                        writer.println(key + ":" + value);
                    }
                }
            }
            writer.close();
        } catch (Exception e) {
            return false;
        }
        return true;
    }

    public void add(String words, String translation) {
        dict.put(words, translation);
        dictR.put(translation, words);
        list.add(dict);
        list.add(dictR);
    }

    public String translate(String word) {

        if (!list.isEmpty()){
            for (int a = 0; a < list.size(); a++) {
                if (list.get(a).containsKey(word)) {
                    HashMap nDict = new HashMap<>();
                    nDict = list.get(a);
                    if (nDict.containsKey(word)){
                        return (String)nDict.get(word);
                    }
                }
            }
        }
        return null;
    }

    public void delete(String word) {
        if (dict.containsKey(word)) {
            dict.remove(word);
        }
        if (dictR.containsKey(word)) {
            dictR.remove(word);
        }
    }

}
